package com.procurement.orchestrator.infrastructure.configuration.property.kafka

import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.common.serialization.StringSerializer
import java.util.*
import kotlin.collections.HashMap

class Producer(
    var topic: String? = null,

    var ssl: Ssl = Ssl(),

    /**
     * Number of acknowledgments the producer requires the leader to have received
     * before considering a request complete.
     */
    var acks: String? = null,

    /**
     * Number of records to batch before sending.
     */
    var batchSize: Int? = null,

    /**
     * Comma-delimited list of host:port pairs to use for establishing the initial
     * connection to the Kafka cluster.
     */
    var bootstrapServers: List<String> = listOf("localhost:8888"),

    /**
     * Total bytes of memory the producer can use to buffer records waiting to be sent
     * to the server.
     */
    var bufferMemory: Long? = null,

    /**
     * ID to pass to the server when making requests. Used for server-side logging.
     */
    var clientId: String? = null,

    /**
     * Compression type for all data generated by the producer.
     */
    var compressionType: String? = null,

    /**
     * Serializer class for keys.
     */
    var keySerializer: Class<*> = StringSerializer::class.java,

    /**
     * Serializer class for values.
     */
    var valueSerializer: Class<*> = StringSerializer::class.java,

    /**
     * When greater than zero, enables retrying of failed sends.
     */
    var retries: Int? = null,

    /**
     * Additional producer-specific properties used to configure the client.
     */
    var properties: Map<String, String> = HashMap()
) {
    fun buildProperties(): Properties {
        return Properties().apply {
            acks?.also { this[ProducerConfig.ACKS_CONFIG] = it }
            batchSize?.also { this[ProducerConfig.BATCH_SIZE_CONFIG] = it }
            bootstrapServers.also { this[ProducerConfig.BOOTSTRAP_SERVERS_CONFIG] = it }
            bufferMemory?.also { this[ProducerConfig.BUFFER_MEMORY_CONFIG] = it }
            clientId?.also { this[ProducerConfig.CLIENT_ID_CONFIG] = it }
            compressionType?.also { this[ProducerConfig.COMPRESSION_TYPE_CONFIG] = it }
            this[ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG] = keySerializer
            this[ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG] = valueSerializer
            retries?.also { this[ProducerConfig.RETRIES_CONFIG] = it }
            putAll(ssl.buildProperties())
            if (properties.isNotEmpty()) putAll(properties)
        }
    }
}
